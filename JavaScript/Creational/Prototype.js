/**
 * @description
 * Задаёт виды создаваемых объектов с помощью
 * экземпляра-прототипа и создаёт новые объекты
 * путём копирования этого прототипа. Он позволяет
 * уйти от реализации и позволяет следовать принципу
 * «программирование через интерфейсы».
 * В качестве возвращающего типа указывается интерфейс/абстрактный
 * класс на вершине иерархии, а классы-наследники могут подставить
 * туда наследника, реализующего этот тип.

 * Проще говоря, это паттерн создания объекта
 * через клонирование другого объекта вместо создания через конструктор.
 *
 * @author DarkCoderDev (https://github.com/DarkCoderDev)
 * @author adideas (https://github.com/adideas)
 */

const prototype = {
    getYear() {
        return new Date().getFullYear();
    }
}

const time = {
    __proto__: prototype,
    birthDay: 1995,
    getAge() {
        return this.getYear() - this.birthDay
    }
}